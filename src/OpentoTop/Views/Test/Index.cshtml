<ul class="nav nav-tabs" role="tablist">
	<li role="presentation" class="active">
		<a href="#demo" id="demo-tab" role="tab" data-toggle="tab" aria-controls="demo" aria-expanded="true">示例</a>
	</li>
	<li role="presentation">
		<a href="#code" id="code-tab" role="tab" data-toggle="tab" aria-controls="code">代码</a>
	</li>
	<li role="presentation">
		<a href="#log" id="log-tab" role="tab" data-toggle="tab" aria-controls="log">日志</a>
	</li>
</ul>
<div class="tab-content">
	<div role="tabpanel" class="tab-pane fade in active" id="demo" aria-labelledby="demo-tab">

		<div class="row" style="margin-top: 20px;">
			<input type="hidden" id="domain" value="<%= domain %>">
			<input type="hidden" id="uptoken_url" value="<%= uptoken_url %>">
			<ul class="tip col-md-12 text-mute">
				<li>
					<small>
						JavaScript SDK 基于 Plupload 开发，可以通过 Html5 或 Flash 等模式上传文件至七牛云存储。
					</small>
				</li>
				<li>
					<small>临时上传的空间不定时清空，请勿保存重要文件。</small>
				</li>
				<li>
					<small>Html5模式大于4M文件采用分块上传。</small>
				</li>
				<li>
					<small>上传图片可查看处理效果。</small>
				</li>
				<li>
					<small>本示例限制最大上传文件100M。</small>
				</li>
			</ul>
			<div class="col-md-12">
				<div id="container">
					<a class="btn btn-default btn-lg " id="pickfiles" href="#">
						<i class="glyphicon glyphicon-plus"></i>
						<span>选择文件</span>
					</a>
				</div>
			</div>
			<div style="display:none" id="success" class="col-md-12">
				<div class="alert-success">
					队列全部文件处理完毕
				</div>
			</div>
			<div class="col-md-12 ">
				<table class="table table-striped table-hover text-left" style="margin-top:40px;display:none">
					<thead>
						<tr>
							<th class="col-md-4">Filename</th>
							<th class="col-md-2">Size</th>
							<th class="col-md-6">Detail</th>
						</tr>
					</thead>
					<tbody id="fsUploadProgress"></tbody>
				</table>
			</div>
		</div>

	</div>
	<div role="tabpanel" class="tab-pane fade" id="code" aria-labelledby="code-tab">

		<div class="row" style="margin-top: 20px;">
			<div class="col-md-12">
				<pre><code>
						//引入Plupload 、qiniu.js后
						var uploader = Qiniu.uploader({
							runtimes: 'html5,flash,html4',    //上传模式,依次退化
							browse_button: 'pickfiles',       //上传选择的点选按钮，**必需**
							uptoken_url: '/token',            //Ajax请求upToken的Url，**强烈建议设置**（服务端提供）
							// uptoken : '<Your upload token>', //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
							// unique_names: true, // 默认 false，key为文件名。若开启该选项，SDK为自动生成上传成功后的key（文件名）。
							// save_key: true,   // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK会忽略对key的处理
							domain: 'http://qiniu-plupload.qiniudn.com/',   //bucket 域名，下载资源时用到，**必需**
							get_new_uptoken: false,  //设置上传文件的时候是否每次都重新获取新的token
							container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
							max_file_size: '100mb',           //最大文件体积限制
							flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
							max_retries: 3,                   //上传失败最大重试次数
							dragdrop: true,                   //开启可拖曳上传
							drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
							chunk_size: '4mb',                //分块上传时，每片的体积
							auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
							init: {
								'FilesAdded': function(up, files) {
									plupload.each(files, function(file) {
										// 文件添加进队列后,处理相关的事情
									});
								},
								'BeforeUpload': function(up, file) {
									   // 每个文件上传前,处理相关的事情
								},
								'UploadProgress': function(up, file) {
									   // 每个文件上传时,处理相关的事情
								},
								'FileUploaded': function(up, file, info) {
									   // 每个文件上传成功后,处理相关的事情
									   // 其中 info 是文件上传成功后，服务端返回的json，形式如
									   // {
									   //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
									   //    "key": "gogopher.jpg"
									   //  }
									   // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
									   // var domain = up.getOption('domain');
									   // var res = parseJSON(info);
									   // var sourceLink = domain + res.key; 获取上传成功后的文件的Url
								},
								'Error': function(up, err, errTip) {
									   //上传出错时,处理相关的事情
								},
								'UploadComplete': function() {
									   //队列文件处理完毕后,处理相关的事情
								},
								'Key': function(up, file) {
									// 若想在前端对每个文件的key进行个性化处理，可以配置该函数
									// 该配置必须要在 unique_names: false , save_key: false 时才生效
									var key = "";
									// do something with key here
									return key
								}
							}
						});
						// domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置->基本设置->域名设置"查看获取
						// uploader 为一个plupload对象，继承了所有plupload的方法，参考http://plupload.com/docs
						</code></pre>
			</div>
		</div>

	</div>
	<div role="tabpanel" class="tab-pane fade" id="log" aria-labelledby="log-tab">
		<pre id="qiniu-js-sdk-log"></pre>
	</div>
</div>



@section Scripts{
	<script src="~/lib/plupload.full.min.js"></script>
	<script src="~/lib/qiniu.js"></script>

	<script>

		$(document).ready(function () {
			var uploader = Qiniu.uploader({
				runtimes: 'html5,flash,html4',      // 上传模式,依次退化
				browse_button: 'pickfiles',         // 上传选择的点选按钮，**必需**
				// 在初始化时，uptoken, uptoken_url, uptoken_func 三个参数中必须有一个被设置
				// 切如果提供了多个，其优先级为 uptoken > uptoken_url > uptoken_func
				// 其中 uptoken 是直接提供上传凭证，uptoken_url 是提供了获取上传凭证的地址，如果需要定制获取 uptoken 的过程则可以设置 uptoken_func
				uptoken: '4SlH8Cd6XeMzHHYNpr58W0EWG5EOf1J0R_a35LUv:dutPttjZ2XaT26A5u-Dz08Eop7w=:eyJzY29wZSI6Im1vdmllcyIsImRlYWRsaW5lIjoxNDY2MjE4MDI4fQ==',
				// uptoken : '<Your upload token>', // uptoken 是上传凭证，由其他程序生成
				// uptoken_url: '/uptoken',         // Ajax 请求 uptoken 的 Url，**强烈建议设置**（服务端提供）
				// uptoken_func: function(file){    // 在需要获取 uptoken 时，该方法会被调用
				//    // do something
				//    return uptoken;
				// },
				get_new_uptoken: false,             // 设置上传文件的时候是否每次都重新获取新的 uptoken
				// downtoken_url: '/downtoken',
				// Ajax请求downToken的Url，私有空间时使用,JS-SDK 将向该地址POST文件的key和domain,服务端返回的JSON必须包含`url`字段，`url`值为该文件的下载地址
				// unique_names: true,              // 默认 false，key 为文件名。若开启该选项，JS-SDK 会为每个文件自动生成key（文件名）
				// save_key: true,                  // 默认 false。若在服务端生成 uptoken 的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
				domain: 'o8xx2012v.bkt.clouddn.com',     // bucket 域名，下载资源时用到，**必需**
				container: 'container',             // 上传区域 DOM ID，默认是 browser_button 的父元素，
				max_file_size: '100mb',             // 最大文件体积限制
				flash_swf_url: 'path/of/plupload/Moxie.swf',  //引入 flash,相对路径
				max_retries: 3,                     // 上传失败最大重试次数
				dragdrop: true,                     // 开启可拖曳上传
				drop_element: 'container',          // 拖曳上传区域元素的 ID，拖曳文件或文件夹后可触发上传
				chunk_size: '10mb',                  // 分块上传时，每块的体积
				auto_start: true,                   // 选择文件后自动上传，若关闭需要自己绑定事件触发上传,
				//x_vars : {
				//    自定义变量，参考http://developer.qiniu.com/docs/v6/api/overview/up/response/vars.html
				//    'time' : function(up,file) {
				//        var time = (new Date()).getTime();
				// do something with 'time'
				//        return time;
				//    },
				//    'size' : function(up,file) {
				//        var size = file.size;
				// do something with 'size'
				//        return size;
				//    }
				//},
				init: {
					'FilesAdded': function (up, files) {
						$('table').show();
						$('#success').hide();
						plupload.each(files, function (file) {
							var progress = new FileProgress(file, 'fsUploadProgress');
							progress.setStatus("等待...");
							progress.bindUploadCancel(up);
						});
					},
					'BeforeUpload': function (up, file) {
						var progress = new FileProgress(file, 'fsUploadProgress');
						var chunk_size = plupload.parseSize(this.getOption('chunk_size'));
						if (up.runtime === 'html5' && chunk_size) {
							progress.setChunkProgess(chunk_size);
						}
					},
					'UploadProgress': function (up, file) {
						var progress = new FileProgress(file, 'fsUploadProgress');
						var chunk_size = plupload.parseSize(this.getOption('chunk_size'));
						progress.setProgress(file.percent + "%", file.speed, chunk_size);
					},
					'UploadComplete': function () {
						$('#success').show();
					},
					'FileUploaded': function (up, file, info) {
						var progress = new FileProgress(file, 'fsUploadProgress');
						progress.setComplete(up, info);
					},
					'Error': function (up, err, errTip) {
						$('table').show();
						var progress = new FileProgress(err.file, 'fsUploadProgress');
						progress.setError();
						progress.setStatus(errTip);
					}
				}
			});
			uploader.bind('FileUploaded', function () {
				console.log('hello man,a file is uploaded');
			});

			// domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置->基本设置->域名设置"查看获取

			// uploader 为一个 plupload 对象，继承了所有 plupload 的方法，参考http://plupload.com/docs
		});

	</script>
}